generator client {
 provider = "prisma-client-js"
}

datasource db {
 provider = "postgresql" 
 url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  clerkId       String         @unique
  username      String         @unique
  fullName      String
  email         String         @unique
  imageUrl      String?        // Optional field
  userCreatedAt DateTime       @default(now())
  userUpdatedAt DateTime       @updatedAt
  rentals       RentalForm[]
  sampleTests   SampleTestForm[]

  @@map("users")
}

model SampleTestForm {
 id                  Int              @id @default(autoincrement())
 userId              String
 testName            String
 testEmail           String
 testPhone           String
 testAddress         String
 testInstanceName    String
 analysisTypes       AnalysisType[]
 sampleName          String
 sampleType          SampleType
 sampleQuantity      Int
 samplePreparation   SamplePreparation?
 testDescription     String?
 deliveryMethod      DeliveryMethod
 coverLetter         String?
 sampleRequestNumber String?
 resultFile          String?
 invoiceFile         String?         
 paymentProof        String?         
 createdAt           DateTime         @default(now())
 user                User             @relation(fields: [userId], references: [id])
 timelines           TestTimeline[]
 complaints          Complaint[]

 @@map("sample_test_forms")
}


model RentalForm {
  id                  Int                   @id @default(autoincrement())
  userId              String
  rentalName          String
  rentalEmail         String
  rentalPhone         String
  rentalAddress       String
  rentalInstance      String
  equipmentOrders     RentalEquipmentOrder[]  // Relasi baru
  startDate           DateTime
  endDate             DateTime
  agreementFile       String?
  rentalRequestNumber String?
  invoiceFile         String?         
  paymentProof        String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  user                User                  @relation(fields: [userId], references: [id])
  timelines           RentalTimeline[]
  complaints          Complaint[]

  @@map("rental_forms")
}

model RentalEquipmentOrder {
  id               Int         @id @default(autoincrement())
  rentalFormId     Int
  equipmentType    RentalEquipment
  quantity         Int
  rentalForm       RentalForm @relation(fields: [rentalFormId], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@map("rental_equipment_orders")
}

model Complaint {
 id                    Int              @id @default(autoincrement())
 complaintDescription  String
 complaintCreateAt     DateTime         @default(now())
 rentalForm            RentalForm?      @relation(fields: [rentalFormId], references: [id])
 rentalFormId          Int?
 sampleTestForm        SampleTestForm?  @relation(fields: [sampleTestFormId], references: [id])
 sampleTestFormId      Int?

 @@map("complaints")
}

model TestTimeline {
 id                    Int            @id @default(autoincrement())
 testId                Int
 testStatus            TestStatus
 testTimelineCreatedAt DateTime       @default(now())
 test                  SampleTestForm @relation(fields: [testId], references: [id])

 @@map("test_timelines")
}

model RentalTimeline {
 id                      Int            @id @default(autoincrement())
 rentalId                Int
 rentalStatus            RentalStatus
 rentalTimelineCreatedAt DateTime       @default(now())
 rental                  RentalForm     @relation(fields: [rentalId], references: [id])

 @@map("rental_timelines")
}


// ENUM yang digunakan dalam sistem
enum TestStatus {
  SUBMITTED
  RECEIVED
  REVIEWING
  APPROVED
  REJECTED
  TESTED
  PAID
  COMPLETED
}

enum RentalStatus {
  SUBMITTED
  RECEIVED
  REVIEWING
  APPROVED
  REJECTED
  PAID
  DELIVERY
  IN_USE
  RETURNED
}

enum SampleType {
  LIQUID
  SOLID
  PASTE
  GEL
  GAS
}

enum DeliveryMethod {
  SELF
  LAB_DELIVERY
}

enum SamplePreparation {
  YES
  NO
}

enum RentalEquipment {
  XRF_HANDHELD
  MICRODRILL_DRMS
  ULTRASONIC_HARDNESS_TESTER
  UPV
  THERMAL_CAMERA
  SCHMIDT_HAMMER
}

enum AnalysisType {
  XRF
  XRD
  SEM_EDS
  UV_VIS
  UTM
  FTIR
  TG_DSC
  RAMAN
  NMR
  GC_MS
  UPLC_MSMS
  CPC
  FREEZE_DRYER
  MICRODRILL_DRMS
  COLONY_COUNTER
  MIKROSKOP_TRINOKULER
  ROTARY_VACUUM_EVAPORATOR
}
